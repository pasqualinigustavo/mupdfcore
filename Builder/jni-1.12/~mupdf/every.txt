source/html/epub-doc.c

//if (fz_has_archive_entry(ctx, zip, "META-INF/rights.xml"))
//		fz_throw(ctx, FZ_ERROR_GENERIC, "EPUB is locked by DRM");
//	if (fz_has_archive_entry(ctx, zip, "META-INF/encryption.xml"))
//		fz_throw(ctx, FZ_ERROR_GENERIC, "EPUB is locked by DRM");


source/html/css-apply.c
//INHERIT value = value_from_property(match, "font-size");

		else if (!strcmp(value->data, "inherit")) style->font_size = make_number(1.0f, N_SCALE);
		else style->font_size =make_number(1.0f, N_SCALE);
	
//REM	
	
			/* FIXME: 'rem' should be 'em' of root element. This is a bad approximation. */
		if (p[0] == 'r' && p[1] == 'e' && p[2] == 'm' && p[3] == 0)
			return make_number(x, N_SCALE);

		/* FIXME: 'ch' should be width of '0' character. This is an approximation. */
		if (p[0] == 'c' && p[1] == 'h' && p[2] == 0)
			return make_number(x / 2, N_LENGTH);

		return make_number(x, N_SCALE);
		
		
//auto

if (!strcmp(value->data, "auto"))
			return make_number(0, N_LENGTH);		
		
		
//noto.c
//#define NOTO_SMALL


//add fb2 styles to main styles

//html-layout.c
static void measure_image(fz_context *ctx, fz_html_flow *node, float max_w, float max_h)
{
	float xs = 1, ys = 1, s = 1;
	float image_w = node->content.image->w * 72.0f / node->content.image->xres;
	float image_h = node->content.image->h * 72.0f / node->content.image->yres;
	node->x = 0;
	node->y = 0;
	if (image_w > max_w)
		xs = max_w / image_w;
	if (image_h > max_h)
		ys = max_h / image_h;

	if(image_w < max_w/7 && image_h < max_h/7){ //very small parts
		xs = 7;
		ys = 7;
	}else if(image_w < max_w && image_h < max_h/7){//line images
		xs = max_w / image_w;
		ys = max_h / image_h;
	}else if(image_w < max_w/2 && image_h < max_h/3){//line images
		xs = 2;
		ys = 2;	
	}
	
	s = fz_min(xs, ys);
	node->w = image_w * s;
	node->h = image_h * s;
}
//stext-output.c
static void
fz_print_stext_image_as_html(fz_context *ctx, fz_output *out, fz_stext_block *block)
{
	int x = block->bbox.x0;
	int y = block->bbox.y0;
	int w = block->bbox.x1 - block->bbox.x0;
	int h = block->bbox.y1 - block->bbox.y0;

	//fz_write_printf(ctx, out, "<img style=\"top:%dpt;left:%dpt;width:%dpt;height:%dpt\" src=\"data:", y, x, w, h);
	fz_write_printf(ctx, out, "<img src=\"data:", y, x, w, h);
	fz_write_image_as_data_uri(ctx, out, block->u.i.image);
	fz_write_string(ctx, out, "\"/>");
}

void
fz_print_stext_page_as_text_my(fz_context *ctx, fz_output *out, fz_stext_page *page)
{
	fz_stext_block *block;
	fz_stext_line *line;
	fz_stext_char *ch;
	char utf[10];
	int i, n;

	for (block = page->first_block; block; block = block->next)
	{

		if (block->type == FZ_STEXT_BLOCK_IMAGE){
			//fz_write_printf(ctx,out,"<b> FZ_STEXT_BLOCK_IMAGE !!!!!!!!!!!</b>");
			fz_print_stext_image_as_html(ctx, out, block);
		}else if (block->type == FZ_STEXT_BLOCK_TEXT)
		{
			for (line = block->u.t.first_line; line; line = line->next)
			{
					int is_bold = fz_font_is_bold(ctx, line->first_char->font);
					int is_italic = fz_font_is_italic(ctx, line->first_char->font);

					if (is_bold){						
						fz_write_printf(ctx,out,"<b>");
					}

					if (is_italic){
						fz_write_printf(ctx,out,"<i>");
					}

				for (ch = line->first_char; ch; ch = ch->next)
				{
					n = fz_runetochar(utf, ch->c);
					for (i = 0; i < n; i++)
						fz_write_byte(ctx, out, utf[i]);
				}

				    if(is_bold){
						fz_write_printf(ctx,out,"</b>&nbsp; ");
					}

					if(is_italic){
						fz_write_printf(ctx,out,"</i>&nbsp; ");
					}

				fz_write_string(ctx, out, "&nbsp; ");
				//fz_write_printf(ctx, out, "<br/>");
			}
			//fz_write_string(ctx, out, "\n");
			fz_write_printf(ctx, out, "<br/>");
		}
	}
}
